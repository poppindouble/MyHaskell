
==================== FINAL INTERFACE ====================
2017-11-26 05:13:00.130689 UTC

interface main@main:Main 8002
  interface hash: 87dc59f8e8543821dce6f696cbdb942f
  ABI hash: d37f01557e8324772ce3ac46d217e81d
  export-list hash: 0560166ae3dddaa97746cfba10da7e82
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8cab26816f61a011dc5998ab99eeffa3
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.initState
  Main.main
  Main.playArray
  Main.ArrayState
  Main.ArrayValue
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      simple-0.1.0.0@simple-0.1.0.0-5DX8evVT2MQPefjCl7ERW
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity base-4.9.1.0:Data.List.NonEmpty
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Semigroup
                         base-4.9.1.0:Data.Type.Equality base-4.9.1.0:Data.Version
                         base-4.9.1.0:Data.Void base-4.9.1.0:GHC.Exts
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO c9de64c5f5407c4cf1c52500c4d15200
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State 749dca8ca0e6625b32091d445bd92b01
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State.Class 6d31234b0a911b56412061943d18b89e
import  -/  simple-0.1.0.0@simple-0.1.0.0-5DX8evVT2MQPefjCl7ERW:Lib 78be413347c3ab9df2af47c3b122a7a6
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.State.Lazy 371607e50dde46b5f4103b3ab334a497
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
a1a2177834de98e1483320f0e2bdc733
  type ArrayState = [GHC.Types.Int]
77438929613aa3f5679e71c199ec8a11
  type ArrayValue = ()
4e4954e8c6e596648aab685d90518203
  initState :: [t]
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) GHC.Types.[] -}
d9c0dee8a685c5ed422401aaa63f23bf
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
01d62c2c484918d4b5d94b688c90c90e
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
129a1a814fa667791781f32a098e848d
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
e34a9cd7d59328f81550e7a733ba07dc
  playArray ::
    GHC.Types.Int
    -> Control.Monad.Trans.State.Lazy.State
         Main.ArrayState Main.ArrayValue
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (0, True, True)
                Main.playArray1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Trans
                          (<[GHC.Types.Int]>_R
                           ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                         <((), [GHC.Types.Int])>_R))
                          (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                    <[GHC.Types.Int]>_N
                                    <Data.Functor.Identity.Identity>_R
                                    <Main.ArrayValue>_N))) -}
134f9f2bd4d5e3b0d3ec9e6e2aaadf58
  playArray1 ::
    GHC.Types.Int -> [GHC.Types.Int] -> ((), [GHC.Types.Int])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (eta :: [GHC.Types.Int]) ->
                 (GHC.Tuple.(), GHC.Types.: @ GHC.Types.Int x eta)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

